/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Spring
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // Asciidoctor
    id 'org.asciidoctor.convert' version '2.4.0'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Boot Validation: @Valid 관련 검증 어노테이션 기능 제공
    // - 추가 이유: Spring Boot 2.3 버전부터는 spring-boot-starter-web 의존성 내부에 있던 validation이 분리됨
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring REST Docs: Test 코드를 통해 API 명세서를 만들어주는 기능 제공
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Spring devTool: 개발을 편리하게 할 수 있는 기능 제공
    // - Automatic Restart: claapath에 있는 파일이 변경될 때마다 애플리케이션을 자동으로 재시작해주는 기능 제공
    // - Live Reload: 정적 자원(html, css, js) 수정 시 새로고침 없이 바로 적용되는 기능 제공
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring Boot Test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // AssertJ
    testImplementation 'org.assertj:assertj-core:3.18.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Jackson for JSON.
    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.3'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Lombok: 보일러플레이트 코드를 어노테이션을 통해 줄여주는 라이브러리
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    // Mapstruct: 어노테이션 프로세서를 사용하여 객체 간 Mapping을 도와주는 라이브러리
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // DozerMapper (Deprecated) - Mapstruct 대체 예정
    implementation 'com.github.dozermapper:dozer-core:6.4.0'
}

application {
    // Define the main class for the application.
    mainClass = 'com.codesoom.assignment.App'
}

ext {
    // Test 스니펫 문서들의 저장 위치를 설정합니다.
    set('snippetsDir', file("build/generated-snippets"))
}

test {
    // Use junit platform for unit tests.
    useJUnitPlatform()

    // `snippetsDir로 설정한 디렉토리에 Test 스니펫을 생성합니다.
    outputs.dir snippetsDir
}

asciidoctor {
    // .adoc 파일에서 다른 .adoc을 include하여 사용할 경우 동일한 경로를 baseDir로 설정합니다.
    // gradle 6.x 버전에서는 자동으로 설정해줌
//    baseDirFollowsSourceFile()

    // `snippetsDir로 설정한 디렉토리를 input 디렉토리로 설정
    inputs.dir snippetsDir

    // asciidoctor는 test에 의존합니다.
    dependsOn test
}

asciidoctor.doFirst {
    // asciidoctor가 실행될 때 먼저 이전 파일 삭제를 진행합니다.
    delete file('src/main/resources/static/docs')
}

// gradle 빌드 시 from에 생성된 docs 파일을 into 경로에 복사합니다.
task createDocument(type: Copy) {
    // createDocumnet는 asciidoctor에 의존합니다.
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static")
}

bootJar {
    // bootJar는 createDocument에 의존합니다.
    dependsOn createDocument

    // gradle 빌드 시 outputDir에 HTML 파일이 생기고, 이것을 jar 안에 /resource/static 폴더에 복사합니다.
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}
